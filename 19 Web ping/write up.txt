====================================================write up====================================================
`ls -al`
ping: total 16
drwxrwxr-x 2 root root 4096 Nov 16  2017 .
drwxr-xr-x 3 root root 4096 Oct  1  2018 ..
-rw-r--r-- 1 root root   65 Nov 16  2017 flag.php
-rw-r--r-- 1 root root 1466 Nov 16  2017 index.php: Name or service not known

`tail *`
ping: ==> flag.php <==
<?php
$flag = 'FLAG{ping_$(capture-the-flag)_UtUbtnvY5F9Hn5dR}';

==> index.php <==
            }
        }

        if(!empty($_GET['ip']))
            echo htmlentities(ping($_GET['ip']));
================================================================================================================
####
linux中有三种标准输入输出，分别是 STDIN，STDOUT，STDERR，对应的数字是 0，1，2。

STDIN 是标准输入，默认从键盘读取信息；
STDOUT 是标准输出，默认将输出结果输出至终端，也就是显示器之类的东西；
STDERR 是标准的错误信息，默认也会显示在终端上。
由于STDOUT与STDERR都会默认显示在终端上，为了区分二者的信息，就有了编号的0，1，2的定义，用1表示STDOUT，2表示STDERR。

example:
体验一下编号 1，2 的作用，find /etc -name passwd 1>find.out 2>find.err ，这里会将 STDOUT 与 STDERR 分别存放至 find.out 和 find.err 中

若要将所有的输出及错误信息都显示出来，可以用&表示全部1和2的信息
example:
find /etc -name passwd &>find.all

有时候希望将错误的信息重新定向到输出，就是将2的结果重定向至1中就有了”2>1”这样的思路，如果按照上面的写法，系统会默认将错误的信息（STDERR）2重定向到一个名字为1的文件中，而非所想的（STDOUT）中。因此需要加&进行区分。就有了 2>&1 这样的用法
example:
find /etc -name passwd 2>&1 |less
2>&1|less 表示将错误信息重定向至标准输出，并用less进行分页显示(可以随意浏览内容)。

####
反引号``

反引号``是命令替换，命令替换是指Shell可以先执行``中的命令，将输出结果暂时保存，在适当的地方输出。语法:`command`
example:
root@kali:~/Documents/php# echo "Date is `date`"
Date is Tue Mar  6 08:06:55 EST 2018

root@kali:~/Documents/php# echo '$name'
$name
root@kali:~/Documents/php# echo "$name"
wenbo
root@kali:~/Documents/php# echo `echo '$name'`
$name
root@kali:~/Documents/php# echo `echo "$name"`
wenbo
root@kali:~/Documents/php# echo "echo '$name'"
echo 'wenbo'
root@kali:~/Documents/php# echo 'echo '$name''
echo wenbo
root@kali:~/Documents/php# echo "echo "$name""
echo wenbo
root@kali:~/Documents/php# echo "echo "$name
echo wenbo
root@kali:~/Documents/php# echo 'echo '$name
echo wenbo


一、单引号和双引号

首先，单引号和双引号，都是为了解决中间有空格的问题。

空格在linux中时作为一个很典型的分隔符，比如 string1=this is a string，这样执行会报错。为了避免这个问题，因此就产生了单引号和双引号。他们的区别在于，单引号将剥夺其中的所有字符的特殊含义，而双引号中 的'$'（参数替换）和'`'（命令替换）是例外。所以，两者基本上没有什么区别，除非在内容中遇到了参数替换符$和命令替换符`。

看下面的例子：
num=3
echo ‘$num’
$num
echo “$num”
3
如果需要在双引号””里面使用这两种符号，需要用反斜杠转义。


二、反引号``
这个东西的用法，我百度了一下，和$()是一样的。在执行一条命令时，会先将其中的 ``，或者是$() 中的语句当作命令执行一遍，再将结果加入到原命令中重新执行，例如：
echo `ls`
会先执行 ls 得到xx.sh等，再替换原命令为：
echo xx.sh
最后执行结果为
xx.sh
那么，平时我们遇到的把一堆命令的执行结果输出到一个变量中，需要用这个命令替换符括起来，也就可以理解了。
这里又涉及到了一个问题，虽然不少系统工程师在使用替换功能时，喜欢使用反引号将命令括起来。但是根据POSIX规范，要求系统工程师采用的是$(命令)的形式。所以，我们最好还是遵循这个规范，少用``，多用$()

####
head命令

head命令默认显示头部的前10行
tail命令同head命名正好相反，tail默认输出尾部10行





